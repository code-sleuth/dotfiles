export ZSH="$HOME/.oh-my-zsh"
export GPG_TTY=$(tty)
ZSH_THEME="robbyrussell"

# Aliases: editor
alias e="$EDITOR"
alias E="sudo -e"

# Aliases: ls
# # ---- Eza (better ls) -----
# alias l='eza -1A --group-directories-first --color=always --git-ignore'
alias l="eza --color=always --long --git --no-filesize --icons=always --no-time --no-user --no-permissions"
alias ls='l'
alias la='l -l --time-style="+%Y-%m-%d %H:%M" --no-permissions --octal-permissions'
alias tree='l --tree'

# Aliases: git
alias ga='git add'
alias gap='ga --patch'
alias gb='git branch'
alias gba='gb --all'
alias gc='git commit'
alias gca='gc --amend --no-edit --signoff'
alias gce='gc --amend'
alias gco='git checkout'
alias gcl='git clone --recursive'
alias gd='git diff --output-indicator-new=" " --output-indicator-old=" "'
alias gds='gd --staged'
alias gi='git init'
alias gl='git log --graph --all --pretty=format:"%C(magenta)%h %C(white) %an  %ar%C(auto)  %D%n%s%n"'
alias gm='git merge'
alias gn='git checkout -b'  # new branch
alias gp='git push'
alias gr='git reset'
alias gs='git status --short'
alias gu='git pull'

gcm() { git commit --message "$*" }

# Aliases: docker
alias dps='docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"'
alias dl='docker logs --tail=100'
alias dc='docker compose'

# Aliases: tmux
alias ta='tmux attach'
alias tl='tmux list-sessions'
alias tn='tmux new-session -s'

# Aliases: rg
alias rg="rg --hidden --smart-case --glob='!.git/' --no-search-zip --trim --colors=line:fg:black --colors=line:style:bold --colors=path:fg:magenta --colors=match:style:nobold"

# Aliases: pass
alias pa='pass'
alias pac='pass -c'
alias po='pass otp'
alias poc='pass otp -c'
alias pg='openssl rand -base64 33'

# Aliases: launchctl
alias sd='sudo launchctl'
alias sdu='launchctl'
alias jd='log show --style syslog --last 1h'

# Human-readable commands
alias cal='TZ=Africa/Nairobi ncal'
alias du='du -h'
alias free='top -l 1 | grep PhysMem'

# Aliases: safety
# alias cp='cp --interactive'
# alias mv='mv --interactive'

# Aliases: misc
mk() {
  mkdir "$1" && cd "$1"
}
alias rf='rm -rf'
alias py='python3'
alias ipy='ipython'
alias ping='ping -4A'

alias -g p='2>&1 | less'
alias sudo='sudo '  # allow aliases with sudo

# Aliases: poetry
alias pti='poetry install'
alias ptr='poetry run'
alias pte='poetry run $EDITOR'

# Aliases: ledger
alias lg='ledger'
alias lga='ledger accounts'
alias lgb='ledger balance'
alias lgr='ledger register'
alias el='e ~/.ledger/journal.ldg'
alias cdl='cd ~/.ledger'

# Aliases: when
alias wi='when ci --future=30'
alias ew='when eci'
alias cdw='cd ~/.when'

# Man colors
man() {
  GROFF_NO_SGR=1 \
  LESS_TERMCAP_mb=$'\e[31m' \
  LESS_TERMCAP_md=$'\e[34m' \
  LESS_TERMCAP_me=$'\e[0m' \
  LESS_TERMCAP_se=$'\e[0m' \
  LESS_TERMCAP_so=$'\e[1;30m' \
  LESS_TERMCAP_ue=$'\e[0m' \
  LESS_TERMCAP_us=$'\e[35m' \
  command man "$@"
}

# Prompt
PROMPT=$'%{\033[34m%} %2~ %{\033[0m%}'
PROMPT2=$'%{\033[33m%} ... %{\033[0m%}'
RPROMPT=$'%(0?..%(130?..%{\033[31m%}%?%{\033[0m%}))'

# ZLE
KEYTIMEOUT=10000 # 10ms for grouping escape sequences
WORDCHARS='-_:'

setopt interactive_comments

# Jobs
setopt auto_continue  # continue jobs on disown
setopt check_jobs  # do not exit shell with jobs
setopt check_running_jobs

# History
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST="$HISTSIZE"

setopt extended_history
setopt inc_append_history
setopt inc_append_history_time
setopt share_history
setopt hist_fcntl_lock

setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_no_store  # ignore fc command

HISTORY_IGNORE='(rm *|rf *)'

# History: interactive search
__history() {
  LBUFFER="$(fc -ln 0 | fzf --query="${LBUFFER}")"
  zle redisplay
}

zle -N __history

# Completion
LISTMAX=10000  # do not show warning if there is too much items in completion

setopt glob_dots  # include dotfiles into completion by default
setopt hash_cmds  # hash command locations
setopt list_packed

autoload -Uz compinit
compinit -C  # -C disables security checks on dump file

# _complete is base completer
# _approximate will fix completion if there is no matches
# _extensions will complete glob patters with extensions
zstyle ':completion:*' completer _extensions _complete _approximate

zstyle ':completion:*' menu select  # menu with selection
zstyle ':completion:*' increment yes
zstyle ':completion:*' verbose yes
zstyle ':completion:*' squeeze-slashes yes  # replace // with /

zstyle ':completion:*' file-sort modification  # show recently used files first
zstyle ':completion:*' list-dirs-first yes
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"  # colored files and directories, blue selection box
zstyle ':completion:*' ignored-patterns '.git'

zstyle ':completion:*' rehash false  # improves performance
zstyle ':completion:*' use-cache true


# Keyboard
unsetopt flow_control  # disable ^S / ^Q

bindkey -e  # Zsh default keybindings are vim, because EDITOR is set to vim, use emacs ones

bindkey '^I' complete-word  # Tab, complete instead of expand-and-complete
bindkey '^[[3~' delete-char  # Delete
bindkey '^[[Z' reverse-menu-complete  # Shift+Tab
bindkey '^[[1;5D' backward-word  # Control-Left
bindkey '^[[1;5C' forward-word  # Control-Right

bindkey '^R' __history

# Line editor
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^S' edit-command-line

# Super Ctrl-Z
fg-ctrl-z () {
  fg 2> /dev/null
}
zle -N fg-ctrl-z
bindkey '^Z' fg-ctrl-z

# source $ZSH/oh-my-zsh.sh

# set up fzf key bindings and fuzzy completion
eval "$(fzf --zsh)"
alias nlof="~/.config/scripts/fzf_list_old_files.sh"

export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

# --- setup fzf theme ---
fg="#CBE0F0"
bg="#011628"
bg_highlight="#143652"
purple="#B388FF"
blue="#06BCE4"
cyan="#2CF9ED"

export FZF_DEFAULT_OPTS="--color=fg:${fg},bg:${bg},hl:${purple},fg+:${fg},bg+:${bg_highlight},hl+:${purple},info:${blue},prompt:${cyan},pointer:${cyan},marker:${cyan},spinner:${cyan},header:${cyan}"

# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

# ----- Bat (better cat) -----
export BAT_THEME=tokyonight_night

show_file_or_dir_preview="if [ -d {} ]; then eza --tree --color=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi"

export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

export BAT_STYLE=full
# export FZF_GIT_CAT=bat --style=$BAT_STYLE --color=$FZF_GIT_COLOR
export FZF_GIT_COLOR=always
export FZF_GIT_PAGER=$(git config --get core.pager)
export FZF_GIT_PREVIEW_COLOR=always
# source ~/.config/fzf-git.sh/fzf-git.sh
source ~/.config/scripts/fzf_git.sh


# Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo ${}'"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview "$show_file_or_dir_preview" "$@" ;;
  esac
}

# Plugin: zoxide ---- Zoxide (better cd) ----
export _ZO_FZF_OPTS="$FZF_DEFAULT_OPTS --no-tac --select-1 --exit-0"
# eval "$(zoxide init zsh --no-cmd)"
eval "$(zoxide init zsh)"
alias z='__zoxide_zi'
alias ~='cd ~'
# alias cd="z"
ze() {
  DIR=$(zoxide query -i "$@")
  [ -n "$DIR" ] && cd "$DIR" && e .
}

# Plugin: autosuggestions
source $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# use atuin for history
source $HOME/.config/scripts/atuin.sh
alias asr="atuin scripts run"
alias as="aerospace"
alias v="nvim"

# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#606090'
# ZSH_AUTOSUGGEST_STRATEGY=(history completion)
# ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=40

# Plugin: syntax highlighting
source $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
ZSH_HIGHLIGHT_MAXLENGTH=120

# Rainbow brackets in special order, easier for eyes
ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=magenta'
ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=green'
ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=blue'
ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[bracket-level-6]='fg=red'

# Custom styles
# Errors
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=red,underline'

# Keywords
ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=blue'

# Commands
ZSH_HIGHLIGHT_STYLES[precommand]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=magenta'
ZSH_HIGHLIGHT_STYLES[global-alias]='fg=magenta'
ZSH_HIGHLIGHT_STYLES[arg0]='fg=magenta'

# Strings
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=green'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=green'
ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]='fg=yellow'

# Redirections
ZSH_HIGHLIGHT_STYLES[redirection]='fg=cyan'

# Paths
ZSH_HIGHLIGHT_STYLES[path]='none'

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export PATH="/opt/riscv/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"
# os gnu options
# export PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"
# export PATH="/opt/homebrew/opt/binutils/bin:$PATH"
# export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"
# export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
# # kernel dev
# export LDFLAGS="-L/opt/homebrew/opt/binutils/lib"
# export CPPFLAGS="-I/opt/homebrew/opt/binutils/include"

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
export PATH="/opt/homebrew/opt/postgresql@16/bin:$PATH"
export KUBE_CONFIG_PATH="$HOME/.kube/config"
export PATH="/opt/local/bin:$PATH"
# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=($HOME/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions
export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
export PATH="$HOME/.local/share/solana/install/releases/stable-f1c269ac192282e7e061735a473b861221974ea2/solana-release/bin/:$PATH"

# Created by `pipx` on 2025-08-01 12:18:18
export PATH="$PATH:/Users/code/.local/bin"

# bun completions
[ -s "/Users/code/.bun/_bun" ] && source "/Users/code/.bun/_bun"

# NIX
export PATH="/run/current-system/sw/bin:$PATH"

# Cargo
export PATH="$HOME/.cargo/bin:$PATH"
